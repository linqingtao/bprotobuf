#ifndef __PROTOCOL_TEST_H__
#define __PROTOCOL_TEST_H__
#include "proto_cpp.h"
#ifdef __cplusplus
extern "C" {
#else
#define const
#endif
namespace a {
namespace b {
namespace c {
// This file is generated by bprotoc. You can not edit it anyway
// Include the header file to project and then you can use it
class Head : public BMessage {
public:
	Head();
	~Head();
	Head(const Head& msg);
public:
	int8_t get_start() const { return start;}
	void set_start(int8_t val) { start = val;}
	int32_t get_afn() const { return afn;}
	void set_afn(int32_t val) { afn = val;}
	int32_t get_type() const { return type;}
	void set_type(int32_t val) { type = val;}
	uint32_t get_seq() const { return seq;}
	void set_seq(uint32_t val) { seq = val;}
public:
	virtual int ByteSize() const;
	virtual int SerializeToArray(char* buffer, int len) const;
	virtual int ParseFromArray(const char* buffer, int len);
public:
	void CopyTo(Head& msg) const;
	Head& operator=(const Head& msg);
protected:
	int8_t start;
	int32_t afn;
	int32_t type;
	uint32_t seq;
};

class Protocol1 : public BMessage {
public:
	Protocol1();
	~Protocol1();
	Protocol1(const Protocol1& msg);
public:
	int32_t get_a() const { return a;}
	void set_a(int32_t val) { a = val;}
	int64_t get_b() const { return b;}
	void set_b(int64_t val) { b = val;}
public:
	virtual int ByteSize() const;
	virtual int SerializeToArray(char* buffer, int len) const;
	virtual int ParseFromArray(const char* buffer, int len);
public:
	void CopyTo(Protocol1& msg) const;
	Protocol1& operator=(const Protocol1& msg);
protected:
	int32_t a;
	int64_t b;
};

class Protocol2 : public BMessage {
public:
	Protocol2();
	~Protocol2();
	Protocol2(const Protocol2& msg);
public:
	int32_t get_a() const { return a;}
	void set_a(int32_t val) { a = val;}
	int64_t get_b() const { return b;}
	void set_b(int64_t val) { b = val;}
public:
	virtual int ByteSize() const;
	virtual int SerializeToArray(char* buffer, int len) const;
	virtual int ParseFromArray(const char* buffer, int len);
public:
	void CopyTo(Protocol2& msg) const;
	Protocol2& operator=(const Protocol2& msg);
protected:
	int32_t a;
	int64_t b;
};

class SendMsg : public BMessage {
public:
	SendMsg();
	~SendMsg();
	SendMsg(const SendMsg& msg);
public:
	const Head& get_head() const { return head; }
	void set_head(const Head& msg) { head = msg; }
	int8_t get_type() const { return type;}
	void set_type(int8_t val) { type = val;}
	int64_t get_l() const { return l;}
	void set_l(int64_t val) { l = val;}
	uint32_t get_u() const { return u;}
	void set_u(uint32_t val) { u = val;}
	double get_f() const { return f;}
	void set_f(double val) { f = val;}
	int get_bita() const { return bita;}
	void set_bita(uint64_t val) { bita = val;}
	int get_bitb() const { return bitb;}
	void set_bitb(uint64_t val) { bitb = val;}
	int get_bitc() const { return bitc;}
	void set_bitc(uint64_t val) { bitc = val;}
	int get_bitd() const { return bitd;}
	void set_bitd(uint64_t val) { bitd = val;}
	int32_t get_string_len() const { return string_len;}
	void set_string_len(int32_t val) { string_len = val;}
	int32_t get_info_len() const { return info_len;}
	void set_info_len(int32_t val) { info_len = val;}
	int32_t get_bytes_len() const { return bytes_len;}
	void set_bytes_len(int32_t val) { bytes_len = val;}
	int32_t get_uint16_len() const { return uint16_len;}
	void set_uint16_len(int32_t val) { uint16_len = val;}
	int32_t get_heads_len() const { return heads_len;}
	void set_heads_len(int32_t val) { heads_len = val;}
	int32_t get_strings_len() const { return strings_len;}
	void set_strings_len(int32_t val) { strings_len = val;}
	const char* get_data() const { return data;}
	void set_data(const char* data_, int len) { memcpy(data, data_, len > sizeof(data) ? sizeof(data) : len);}
	const char* get_data2() const { return data2;}
	void set_data2(const char* data, int len);
	std::string get_str() const { return str;}
	void set_str(const std::string& str_) { snprintf(str, sizeof(str), "%s", str_.c_str());}
	std::string get_str2() const { return str2;}
	void set_str2(const std::string& str_) { str2 = str_; string_len = str_.length(); }
	const Head& get_heads(int i) const { return heads[i]; }
	void add_heads(int idx, const Head& val) { heads[idx] = val; }
	const Head& get_var_heads(int i) const { return var_heads[i]; }
	void add_var_heads(const Head& val);
	int16_t get_int16s(int i) const { return int16s[i]; }
	void add_int16s(int idx, int16_t val) { int16s[idx] = val; }
	uint32_t get_uint16s(int i) const { return uint16s[i]; }
	void add_uint16s(uint32_t val);
	const BMessage* get_child() const { return child; }
void set_child(const Protocol1& msg);
void set_child(const Protocol2& msg);
	int32_t get_string_len1() const { return string_len1;}
	void set_string_len1(int32_t val) { string_len1 = val;}
	int32_t get_bytes_len1() const { return bytes_len1;}
	void set_bytes_len1(int32_t val) { bytes_len1 = val;}
	int32_t get_array_len1() const { return array_len1;}
	void set_array_len1(int32_t val) { array_len1 = val;}
	std::string get_str3() const { return str3;}
	void set_str3(const std::string& str_) { int _tmp = snprintf(str3, sizeof(str3), "%s", str_.c_str()); string_len1 += _tmp; }
	const char* get_data3() const { return data3;}
	void set_data3(const char* data_, int len) { memcpy(data3, data_, len > sizeof(data3) ? sizeof(data3) : len); bytes_len1 += len > sizeof(data3) ? sizeof(data3) : len; }
	const Head& get_heads3(int i) const { return heads3[i]; }
	void add_heads3(const Head& val);
public:
	virtual int ByteSize() const;
	virtual int SerializeToArray(char* buffer, int len) const;
	virtual int ParseFromArray(const char* buffer, int len);
public:
	void CopyTo(SendMsg& msg) const;
	SendMsg& operator=(const SendMsg& msg);
protected:
	Head head;
	int8_t type;
	int64_t l;
	uint32_t u;
	double f;
	uint64_t bita;
	uint64_t bitb;
	uint64_t bitc;
	uint64_t bitd;
	int32_t string_len;
	int32_t info_len;
	int32_t bytes_len;
	int32_t uint16_len;
	int32_t heads_len;
	int32_t strings_len;
	char data[20];
	char* data2;
	char str[13];
	std::string str2;
	Head heads[2];
	std::vector<Head> var_heads;
	short int16s[5];
	int __uint16s_len;
	unsigned int* uint16s;
	BMessage* child;
	int32_t string_len1;
	int32_t bytes_len1;
	int32_t array_len1;
	char str3[7];
	char data3[4];
	Head heads3[3];
};

}
}
}
#ifdef __cplusplus
}
#endif
#endif
