#ifndef __PROTOCOL_PROTOCOL_H__
#define __PROTOCOL_PROTOCOL_H__
#include "proto_cc.h"
#ifdef __cplusplus
extern "C" {
#else
#define const
#endif
// This file is generated by bprotoc. You can not edit it anyway
// Include the header file to project and then you can use it
typedef struct tag_Head {
	char start;
	int afn;
	int type;
	unsigned int seq;
} Head;

typedef struct tag_Protocol1 {
	int a;
	long long b;
} Protocol1;

typedef struct tag_Protocol2 {
	int a;
	long long b;
} Protocol2;

typedef struct tag_SendMsg {
	Head head;
	char type;
	long long l;
	unsigned int u;
	double f;
	int bita;
	int bitb;
	int bitc;
	int bitd;
	int string_len;
	int info_len;
	int bytes_len;
	int uint16_len;
	int heads_len;
	int strings_len;
	char data[20];
	char* data2;
	char str[13];
	char* str2;
	Head heads[2];
	int __var_heads_len;
	Head* var_heads;
	short int16s[5];
	int __uint16s_len;
	unsigned int* uint16s;
	void* child;
	int string_len1;
	int bytes_len1;
	int array_len1;
	char str3[7];
	char data3[4];
	Head heads3[3];
} SendMsg;

// Head default value of keys
#define DEFAULT_Head_start  2
// Head create and destroy functions
extern void Head_Init(Head* proto);
extern void Head_Destroy(Head* proto);
// Head stream functions
// Head serialize and parse func for protocol
extern int Head_ParseFromArray(Head* proto, char* buffer, int len);
extern int Head_SerializeToArray(Head* proto, char* buffer, int len);
extern int Head_ByteSize(Head* proto);
extern int Head_CopyTo(Head* from, Head* to);
// Head set and get functions
// Protocol1 default value of keys
// Protocol1 create and destroy functions
extern void Protocol1_Init(Protocol1* proto);
extern void Protocol1_Destroy(Protocol1* proto);
// Protocol1 stream functions
// Protocol1 serialize and parse func for protocol
extern int Protocol1_ParseFromArray(Protocol1* proto, char* buffer, int len);
extern int Protocol1_SerializeToArray(Protocol1* proto, char* buffer, int len);
extern int Protocol1_ByteSize(Protocol1* proto);
extern int Protocol1_CopyTo(Protocol1* from, Protocol1* to);
// Protocol1 set and get functions
// Protocol2 default value of keys
// Protocol2 create and destroy functions
extern void Protocol2_Init(Protocol2* proto);
extern void Protocol2_Destroy(Protocol2* proto);
// Protocol2 stream functions
// Protocol2 serialize and parse func for protocol
extern int Protocol2_ParseFromArray(Protocol2* proto, char* buffer, int len);
extern int Protocol2_SerializeToArray(Protocol2* proto, char* buffer, int len);
extern int Protocol2_ByteSize(Protocol2* proto);
extern int Protocol2_CopyTo(Protocol2* from, Protocol2* to);
// Protocol2 set and get functions
// SendMsg default value of keys
// SendMsg create and destroy functions
extern void SendMsg_Init(SendMsg* proto);
extern void SendMsg_Destroy(SendMsg* proto);
// SendMsg stream functions
// SendMsg serialize and parse func for protocol
extern int SendMsg_ParseFromArray(SendMsg* proto, char* buffer, int len);
extern int SendMsg_SerializeToArray(SendMsg* proto, char* buffer, int len);
extern int SendMsg_ByteSize(SendMsg* proto);
extern int SendMsg_CopyTo(SendMsg* from, SendMsg* to);
// SendMsg set and get functions
extern void SendMsg_set_data(SendMsg* proto, char* buffer, int len);

extern void SendMsg_set_data2(SendMsg* proto, char* buffer, int len);

extern void SendMsg_set_data3(SendMsg* proto, char* buffer, int len);

extern void SendMsg_set_str(SendMsg* proto, const char* buffer, int len);

extern void SendMsg_set_str2(SendMsg* proto, const char* buffer, int len);

extern void SendMsg_set_str3(SendMsg* proto, const char* buffer, int len);

extern void SendMsg_set_child_Protocol1(SendMsg* proto, Protocol1* child);
	
extern void SendMsg_set_child_Protocol2(SendMsg* proto, Protocol2* child);
	
extern Head* SendMsg_get_heads(SendMsg* proto, int i);
extern void SendMsg_add_heads(SendMsg* proto, int i, Head* msg);
extern Head* SendMsg_get_var_heads(SendMsg* proto, int i);
extern void SendMsg_add_var_heads(SendMsg* proto, Head* msg);
extern short SendMsg_get_int16s(SendMsg* proto, int i);
extern void SendMsg_add_int16s(SendMsg* proto, int i, short val);
extern unsigned int SendMsg_get_uint16s(SendMsg* proto, int i);
extern void SendMsg_add_uint16s(SendMsg* proto, unsigned int val);
extern Head* SendMsg_get_heads3(SendMsg* proto, int i);
extern void SendMsg_add_heads3(SendMsg* proto, Head* msg);
#ifdef __cplusplus
}
#endif
#endif
